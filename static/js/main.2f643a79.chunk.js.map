{"version":3,"sources":["../node_modules/encoding/lib sync","App.js","serviceWorker.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","AddressParser","require","Container","styled","div","App","withScriptjs","withGoogleMap","props","defaultZoom","defaultCenter","lat","lng","position","onChangeHKGov","a","value","target","axios","type","ContentType","url","response","data","SuggestedAddress","console","log","onChangeHKParser","parse","forEach","item","index","coordinate","fullAddress","Address","LANG_ZH","transformDistrict","LANG_EN","onChangeGoogle","placeholder","onChange","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iPAAA,SAASA,EAAoBC,GAC5B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBF,EAAM,KAEjD,MADAC,EAAEE,KAAO,mBACHF,EAEPF,EAAoBK,KAAO,WAAa,MAAO,IAC/CL,EAAoBM,QAAUN,EAC9BO,EAAOC,QAAUR,EACjBA,EAAoBS,GAAK,K,+YCGzB,IAAMC,EAAgBC,EAAQ,KAExBC,EAAYC,IAAOC,IAAV,KA0FAC,MA9Ef,WACyBC,uBACrBC,yBAAc,SAAAC,GAAK,OACjB,kBAAC,YAAD,CAAWC,YAAa,EAAGC,cAAe,CAAEC,KAAM,OAAQC,IAAK,UAC7D,kBAAC,SAAD,CAAQC,SAAU,CAAEF,KAAM,OAAQC,IAAK,gBAH7C,IAiBME,EAAa,uCAAG,WAAMtB,GAAN,iBAAAuB,EAAA,6DAEdC,EAAQxB,EAAEyB,OAAOD,MAFH,SAGGE,IAAM,CAC3BC,KAAM,OACNC,YAAa,mBACbC,IAAI,yCAAD,OAA2CL,KAN5B,QAGdM,EAHc,QASPC,MAAQD,EAASC,KAAKC,kBACjCC,QAAQC,IAAI,iBAAkBJ,EAASC,KAAKC,iBAAiB,IAV3C,2CAAH,sDAcbG,EAAgB,uCAAG,WAAMnC,GAAN,eAAAuB,EAAA,6DACjBC,EAAQxB,EAAEyB,OAAOD,MADA,SAEDhB,EAAc4B,MAAMZ,GAFnB,cAGfa,SAAQ,SAACC,EAAMC,GACrBN,QAAQC,IACNI,EACAA,EAAKE,aACLF,EAAKG,YAAYjC,EAAckC,QAAQC,SACvCL,EAAKM,oBACL,oDACAN,EAAKG,YAAYjC,EAAckC,QAAQG,aAVpB,2CAAH,sDAehBC,EAAc,uCAAG,WAAM9C,GAAN,SAAAuB,EAAA,sDACrBU,QAAQC,IAAI,qBADS,2CAAH,sDAIpB,OACE,oCACE,kBAACxB,EAAD,KACE,2BACEqC,YAAY,qBACZC,SAAU1B,EACVK,KAAK,UAGT,kBAACjB,EAAD,KACE,2BACEqC,YAAY,wBACZC,SAAUb,EACVR,KAAK,UAGT,kBAACjB,EAAD,KACE,2BACEqC,YAAY,eACZC,SAAUF,EACVnB,KAAK,YCpFKsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.2f643a79.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 428;","import React from \"react\";\nimport \"./App.css\";\nimport styled from \"styled-components\";\nimport axios from \"axios\";\nimport {\n  withScriptjs,\n  withGoogleMap,\n  GoogleMap,\n  Marker\n} from \"react-google-maps\";\n\nconst AddressParser = require(\"hk-address-parser-lib\");\n\nconst Container = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  margin-top: 20px;\n  input {\n    width: 90%;\n    height: 40px;\n    border: 1px solid blue;\n  }\n`;\n\nfunction App() {\n  const MapWithAMarker = withScriptjs(\n    withGoogleMap(props => (\n      <GoogleMap defaultZoom={8} defaultCenter={{ lat: -34.397, lng: 150.644 }}>\n        <Marker position={{ lat: -34.397, lng: 150.644 }} />\n      </GoogleMap>\n    ))\n  );\n\n  // return (\n  //   <Container><MapWithAMarker\n  //   googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyCSEipzniNAZLQoaWFFwOv-ZXU6O1FgJj0&libraries=places\"\n  //   loadingElement={<Container style={{ height: `100%` }} />}\n  //   containerElement={<Container style={{ height: `400px` }} />}\n  //   mapElement={<Container style={{ height: `100%` }} />}\n  // /></Container>\n  // );\n\n  const onChangeHKGov = async e => {\n    //https://www.als.ogcio.gov.hk/lookup?q=<以自由文本格式輸入地址>\n    const value = e.target.value;\n    const response = await axios({\n      type: \"POST\",\n      ContentType: \"application/json\",\n      url: `https://www.als.ogcio.gov.hk/lookup?q=${value}`\n    });\n\n    if (response.data && response.data.SuggestedAddress) {\n      console.log(\"response.data=\", response.data.SuggestedAddress[0]);\n    }\n  };\n\n  const onChangeHKParser = async e => {\n    const value = e.target.value;\n    const records = await AddressParser.parse(value);\n    records.forEach((item, index) => {\n      console.log(\n        item,\n        item.coordinate(), \n        item.fullAddress(AddressParser.Address.LANG_ZH), \n        item.transformDistrict(),\n        \" =============================================== \",\n        item.fullAddress(AddressParser.Address.LANG_EN)\n      );\n    });\n  };\n\n  const onChangeGoogle = async e => {\n    console.log(\"TODO Google React\");\n  };\n\n  return (\n    <>\n      <Container>\n        <input\n          placeholder=\"HK Gov Address Api\"\n          onChange={onChangeHKGov}\n          type=\"text\"\n        />\n      </Container>\n      <Container>\n        <input\n          placeholder=\"hk-address-parser-lib\"\n          onChange={onChangeHKParser}\n          type=\"text\"\n        />\n      </Container>\n      <Container>\n        <input\n          placeholder=\"Google React\"\n          onChange={onChangeGoogle}\n          type=\"text\"\n        />\n      </Container>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}